@page "/"
@using Quiz.UI.Helpers
@layout MenuLayout

<PageTitle>KWIZ</PageTitle>

<MudContainer Gutters="true" Class="mt-10">
    @* Seccao de Destaques *@
    
    <MudStack Elevation="0">
        <MudText Color="Color.Primary" Typo="Typo.h4" Class="mb-4" >Destaques</MudText>
        <MudCarousel Class="custom-carousel" TData="@CarouselSlide" ItemsSource="GetTopKwizzes" ShowBullets="false">
            <ItemTemplate>
                <div class="card-group">
                    @foreach (var item in context.Items)
                    {
                        <MudCard Class="pa-3">
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@item.QuizName</MudText>
                                <MudText Typo="Typo.body2">@item.TopicName</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" Href=@($"/play/{item.Id}")>Jogar</MudButton>
                            </MudCardActions>
                        </MudCard>
                    }
                </div>
            </ItemTemplate>
        </MudCarousel>
    </MudStack>

    @* Seccao de Quizes em Alta *@

    <MudStack Elevation="0" Style="background-color: #fad3d3; padding: 4px 20px">
        <MudText Color="Color.Error" Typo="Typo.h5" Class="mb-4">🔥 Em Alta </MudText>
        <MudCarousel Class="custom-carousel" TData="@CarouselSlide" ItemsSource="GetFireKwizzes" ShowBullets="false">
            <ItemTemplate>
                <div class="card-group">
                    @foreach (var item in context.Items)
                    {
                        <MudCard Class="pa-3">
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@item.QuizName</MudText>
                                <MudText Typo="Typo.body2">@item.TopicName</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" Href=@($"/play/{item.Id}")>Jogar</MudButton>                            </MudCardActions>
                        </MudCard>
                    }
                </div>
            </ItemTemplate>
        </MudCarousel>
    </MudStack>

    @* Seccao de Quizes recentes *@

    <MudContainer Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4" Color="Color.Primary">Recentes</MudText>
        <MudGrid>
            @foreach (var kwiz in GetRecentKwizzes)
            {
                foreach (var item in kwiz.Items)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3" xl="3">
                        <MudCard Class="pa-2 equal-height-card" >
                            <MudCardContent>
                                <MudText Class="card-title" Typo="Typo.h6">@item.QuizName</MudText>
                                <MudText Class="card-description" Typo="Typo.body2">@item.TopicName</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" Href=@($"/play/{item.Id}")>Jogar</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            }
        </MudGrid>
    </MudContainer>


    <MudScrollToTop>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowCircleUp"/>
    </MudScrollToTop>
</MudContainer>

@code {
    private MudCarousel<string> _carousel;
    private bool _arrows = true;
    private bool _bullets = true;
    private bool _enableSwipeGesture = true;
    private bool _autocycle = true;
    private int selectedIndex = 2;

    public IEnumerable<CarouselSlide> GetFireKwizzes => CarouselHelper.GetTrendingKwizzes(KwizList);
    public IEnumerable<CarouselSlide> GetTopKwizzes => CarouselHelper.GetFeaturedKwizzes(KwizList);
    public IEnumerable<CarouselSlide> GetRecentKwizzes => CarouselHelper.GetRecentKwizzes(KwizList);

    public IEnumerable<TopicDto> TopicList { get; set; } = Enumerable.Empty<TopicDto>();
    public IEnumerable<KwizDto> KwizList { get; set; } = Enumerable.Empty<KwizDto>();

    protected override async Task OnInitializedAsync()
    {
        var topicResult = await Topics.GetAll();
        if (topicResult is not null && topicResult.Success)
            TopicList = topicResult.Data ?? Enumerable.Empty<TopicDto>();

        var kwizResult = await Kwizzes.GetAll();
        if (kwizResult is not null && kwizResult.Success)
            KwizList = kwizResult.Data ?? Enumerable.Empty<KwizDto>();
        StateHasChanged();
    }

}