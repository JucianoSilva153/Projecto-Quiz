@page "/kwizzes"
@page "/kwizzes/{search}"
@layout MenuLayout

<PageName Title="Explorar"></PageName>

<MudContainer Class="pt-4" >
    <MudStack Justify="Justify.Center" Row Class="px-4" AlignItems="AlignItems.Center">
        <MudSelect Label="Filtro por Topico"
                   @bind-Value="@currentTopic"
                   Variant="Variant.Outlined"
                   Adornment="Adornment.Start"
                   AdornmentColor="Color.Primary"
                   AdornmentIcon="@Icons.Material.Filled.Topic">
            <MudSelectItem Value="@string.Empty">Sem Filtro</MudSelectItem>
            @foreach (var topic in TopicList)
            {
                <MudSelectItem Value="topic.TopicName">@topic.TopicName</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
    <MudStack Style="height: 80%">
        <div class="d-flex flex-wrap gap-4" style="overflow: auto;padding: 15px;height: 100%">
            @foreach (var item in List)
            {
            <MudItem xs="12" sm="6" md="4" lg="3" xl="3">
                <MudCard Class="pa-2 equal-height-card" >
                    <MudCardContent>
                        <MudText Class="card-title" Typo="Typo.h6">@item.QuizName</MudText>
                        <MudText Class="card-description" Typo="Typo.body2">@item.TopicName</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" Href=@($"/play/{item.Id}")>Jogar</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            }
        </div>
    </MudStack>
</MudContainer>

@code {
    public IEnumerable<KwizDto> KwizzList { get; set; } = Enumerable.Empty<KwizDto>();
    public IEnumerable<TopicDto> TopicList { get; set; } = Enumerable.Empty<TopicDto>();
    public CurrentUser? MyAccount { get; set; }

    [Parameter]
    public string search { get; set; }
    string currentTopic = "";

    public IEnumerable<KwizDto> List
    {
        get
        {
            var result = KwizzList;
            if (!string.IsNullOrEmpty(search))
            {
                result = result.Where(r => r.QuizName.Contains(search));
            }

            if (!string.IsNullOrEmpty(currentTopic))
            {
                result = result.Where(r => r.TopicName.Contains(currentTopic));
            }

            return result;
        }
    }

    bool isAllowedToPlay = true;

    protected override async Task OnInitializedAsync()
    {
        var kwizResult = await Kwizzes.GetAll();
        if (kwizResult is not null && kwizResult.Success)
            KwizzList = kwizResult.Data ?? Enumerable.Empty<KwizDto>();

        var topicResult = await Topics.GetAll();
        if (topicResult is not null && topicResult.Success)
            TopicList = topicResult.Data ?? Enumerable.Empty<TopicDto>();

        MyAccount = await User.GetItemAsync<CurrentUser>("user");
        if (MyAccount is null || MyAccount.MyAccount?.AccountType != AccountType.Player)
            isAllowedToPlay = false;
    }

}